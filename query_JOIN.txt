"QUERY JOIN"

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)

SELECT DISTINCT players.*
FROM players
INNER JOIN reviews ON reviews.player_id = players.id;

2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)

SELECT DISTINCT v.*
FROM videogames v 
INNER JOIN tournament_videogame tv ON v.id = tv.videogame_id
INNER JOIN tournaments t ON tv.tournament_id = t.id
WHERE t.`year` = 2016;

3- Mostrare le categorie di ogni videogioco (1718)

SELECT videogames.id AS videogame_id, categories.name AS category_name
FROM videogames
INNER JOIN category_videogame cv  ON videogames.id = cv.videogame_id
INNER JOIN categories ON cv.category_id = categories.id

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)

SELECT DISTINCT software_houses.*
FROM software_houses
INNER JOIN videogames ON software_houses.id = videogames.software_house_id
WHERE YEAR(videogames.release_date) > 2020;

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)

SELECT sh.id AS software_house_id, sh.name AS software_house_name, awards.*
FROM software_houses sh 
INNER JOIN videogames ON sh.id = videogames.software_house_id
INNER JOIN award_videogame av  ON videogames.id = av.videogame_id
INNER JOIN awards ON av.award_id = awards.id;

6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)

SELECT DISTINCT c.name , pl.name, v.*
FROM videogames v 
INNER JOIN category_videogame cv  ON v.id = cv.videogame_id 
INNER JOIN categories c  ON cv.category_id = c.id
INNER JOIN reviews r  ON v.id = r.videogame_id 
INNER JOIN pegi_label_videogame plv  ON v.id = plv.videogame_id 
INNER JOIN pegi_labels pl  ON plv.pegi_label_id = pl.id
WHERE r.rating IN (4, 5);

7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)

SELECT DISTINCT v.*
FROM videogames v 
INNER JOIN tournament_videogame tv ON v.id = tv.videogame_id
INNER JOIN tournaments t ON tv.tournament_id = t.id
INNER JOIN player_tournament pt ON t.id = pt.tournament_id
INNER JOIN players p ON pt.player_id = p.id
WHERE p.name LIKE 'S%'

8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)

SELECT t.city AS city
FROM tournaments t 
INNER JOIN tournament_videogame tv ON tv.tournament_id = t.id 
INNER JOIN videogames v ON v.id = tv.videogame_id 
INNER JOIN award_videogame av ON av.videogame_id = v.id 
INNER JOIN awards a ON a.id = av.award_id 
WHERE av.`year` = 2018 AND a.name = 'gioco dell\'anno';

9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)

SELECT p.name AS player_name
FROM players p 
INNER JOIN player_tournament pt ON pt.player_id = p.id 
INNER JOIN tournaments t ON t.id = pt.tournament_id 
INNER JOIN tournament_videogame tv ON tv.tournament_id = t.id 
INNER JOIN videogames v ON v.id = tv.videogame_id 
INNER JOIN award_videogame av ON av.videogame_id = v.id 
INNER JOIN awards a ON a.id = av.award_id 
WHERE av.`year` = 2018 AND a.name = 'gioco più atteso' AND t.`year` = 2019;

Bonus

10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)

SELECT sh.id AS id_sh, sh.name AS house_name, v.name AS videog_name, v.release_date AS videog_date
FROM software_houses sh
JOIN videogames v ON sh.id = v.software_house_id
WHERE v.release_date = (SELECT MIN(release_date) FROM videogames);

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)

SELECT v.id AS vg_id, v.name AS vg_name, v.release_date AS vg_date, COUNT(*) AS tot_reviews 
FROM videogames v 
INNER JOIN reviews r ON r.videogame_id = v.id
GROUP BY v.id
ORDER BY tot_reviews DESC
LIMIT 1; 

12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)

SELECT sh.id, sh.name, COUNT(*) AS tot_awards
FROM software_houses sh
INNER JOIN videogames v ON v.software_house_id = sh.id
INNER JOIN award_videogame av ON av.videogame_id = v.id
INNER JOIN awards a ON a.id = av.award_id
WHERE av.`year` BETWEEN 2015 AND 2016
GROUP BY sh.id, sh.name
ORDER BY tot_awards DESC
LIMIT 1;


13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 1.5 (10)

inferiore a 1.5 = 0
superiore a 1.5 = 10

SELECT c.name , AVG(r.rating) AS avg_rating
FROM categories c
INNER JOIN category_videogame cv ON cv.category_id = c.id
INNER JOIN videogames v ON v.id = cv.videogame_id
INNER JOIN reviews r ON r.videogame_id = v.id
GROUP BY c.name
HAVING avg_rating > 1.5;
